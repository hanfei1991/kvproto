// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: encryptionpb.proto

package encryptionpb

import (
	"fmt"
	"io"
	"math"

	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EncryptionMethod int32

const (
	EncryptionMethod_UNKNOWN    EncryptionMethod = 0
	EncryptionMethod_PLAINTEXT  EncryptionMethod = 1
	EncryptionMethod_AES128_CTR EncryptionMethod = 2
	EncryptionMethod_AES192_CTR EncryptionMethod = 3
	EncryptionMethod_AES256_CTR EncryptionMethod = 4
)

var EncryptionMethod_name = map[int32]string{
	0: "UNKNOWN",
	1: "PLAINTEXT",
	2: "AES128_CTR",
	3: "AES192_CTR",
	4: "AES256_CTR",
}
var EncryptionMethod_value = map[string]int32{
	"UNKNOWN":    0,
	"PLAINTEXT":  1,
	"AES128_CTR": 2,
	"AES192_CTR": 3,
	"AES256_CTR": 4,
}

func (x EncryptionMethod) String() string {
	return proto.EnumName(EncryptionMethod_name, int32(x))
}
func (EncryptionMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_encryptionpb_f6ae5779a9e094d4, []int{0}
}

type FileInfo struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	KeyId                uint64   `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Iv                   []byte   `protobuf:"bytes,3,opt,name=iv,proto3" json:"iv,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileInfo) Reset()         { *m = FileInfo{} }
func (m *FileInfo) String() string { return proto.CompactTextString(m) }
func (*FileInfo) ProtoMessage()    {}
func (*FileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_encryptionpb_f6ae5779a9e094d4, []int{0}
}
func (m *FileInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileInfo.Merge(dst, src)
}
func (m *FileInfo) XXX_Size() int {
	return m.Size()
}
func (m *FileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FileInfo proto.InternalMessageInfo

func (m *FileInfo) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *FileInfo) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *FileInfo) GetIv() []byte {
	if m != nil {
		return m.Iv
	}
	return nil
}

type FileDictionary struct {
	Files                []*FileInfo `protobuf:"bytes,1,rep,name=files" json:"files,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *FileDictionary) Reset()         { *m = FileDictionary{} }
func (m *FileDictionary) String() string { return proto.CompactTextString(m) }
func (*FileDictionary) ProtoMessage()    {}
func (*FileDictionary) Descriptor() ([]byte, []int) {
	return fileDescriptor_encryptionpb_f6ae5779a9e094d4, []int{1}
}
func (m *FileDictionary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileDictionary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileDictionary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FileDictionary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileDictionary.Merge(dst, src)
}
func (m *FileDictionary) XXX_Size() int {
	return m.Size()
}
func (m *FileDictionary) XXX_DiscardUnknown() {
	xxx_messageInfo_FileDictionary.DiscardUnknown(m)
}

var xxx_messageInfo_FileDictionary proto.InternalMessageInfo

func (m *FileDictionary) GetFiles() []*FileInfo {
	if m != nil {
		return m.Files
	}
	return nil
}

type DataKey struct {
	Key                  []byte           `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Id                   uint64           `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Method               EncryptionMethod `protobuf:"varint,3,opt,name=method,proto3,enum=encryptionpb.EncryptionMethod" json:"method,omitempty"`
	CreationTime         uint64           `protobuf:"varint,4,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	WasExposed           bool             `protobuf:"varint,5,opt,name=was_exposed,json=wasExposed,proto3" json:"was_exposed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DataKey) Reset()         { *m = DataKey{} }
func (m *DataKey) String() string { return proto.CompactTextString(m) }
func (*DataKey) ProtoMessage()    {}
func (*DataKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_encryptionpb_f6ae5779a9e094d4, []int{2}
}
func (m *DataKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DataKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataKey.Merge(dst, src)
}
func (m *DataKey) XXX_Size() int {
	return m.Size()
}
func (m *DataKey) XXX_DiscardUnknown() {
	xxx_messageInfo_DataKey.DiscardUnknown(m)
}

var xxx_messageInfo_DataKey proto.InternalMessageInfo

func (m *DataKey) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *DataKey) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DataKey) GetMethod() EncryptionMethod {
	if m != nil {
		return m.Method
	}
	return EncryptionMethod_UNKNOWN
}

func (m *DataKey) GetCreationTime() uint64 {
	if m != nil {
		return m.CreationTime
	}
	return 0
}

func (m *DataKey) GetWasExposed() bool {
	if m != nil {
		return m.WasExposed
	}
	return false
}

type KeyDictionary struct {
	Keys                 []*DataKey `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
	FileDict             *FileInfo  `protobuf:"bytes,2,opt,name=file_dict,json=fileDict" json:"file_dict,omitempty"`
	CurrentDataKey       uint64     `protobuf:"varint,3,opt,name=current_data_key,json=currentDataKey,proto3" json:"current_data_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *KeyDictionary) Reset()         { *m = KeyDictionary{} }
func (m *KeyDictionary) String() string { return proto.CompactTextString(m) }
func (*KeyDictionary) ProtoMessage()    {}
func (*KeyDictionary) Descriptor() ([]byte, []int) {
	return fileDescriptor_encryptionpb_f6ae5779a9e094d4, []int{3}
}
func (m *KeyDictionary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyDictionary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyDictionary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *KeyDictionary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyDictionary.Merge(dst, src)
}
func (m *KeyDictionary) XXX_Size() int {
	return m.Size()
}
func (m *KeyDictionary) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyDictionary.DiscardUnknown(m)
}

var xxx_messageInfo_KeyDictionary proto.InternalMessageInfo

func (m *KeyDictionary) GetKeys() []*DataKey {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *KeyDictionary) GetFileDict() *FileInfo {
	if m != nil {
		return m.FileDict
	}
	return nil
}

func (m *KeyDictionary) GetCurrentDataKey() uint64 {
	if m != nil {
		return m.CurrentDataKey
	}
	return 0
}

func init() {
	proto.RegisterType((*FileInfo)(nil), "encryptionpb.FileInfo")
	proto.RegisterType((*FileDictionary)(nil), "encryptionpb.FileDictionary")
	proto.RegisterType((*DataKey)(nil), "encryptionpb.DataKey")
	proto.RegisterType((*KeyDictionary)(nil), "encryptionpb.KeyDictionary")
	proto.RegisterEnum("encryptionpb.EncryptionMethod", EncryptionMethod_name, EncryptionMethod_value)
}
func (m *FileInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEncryptionpb(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if m.KeyId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEncryptionpb(dAtA, i, uint64(m.KeyId))
	}
	if len(m.Iv) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEncryptionpb(dAtA, i, uint64(len(m.Iv)))
		i += copy(dAtA[i:], m.Iv)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FileDictionary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileDictionary) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Files) > 0 {
		for _, msg := range m.Files {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEncryptionpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DataKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEncryptionpb(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEncryptionpb(dAtA, i, uint64(m.Id))
	}
	if m.Method != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEncryptionpb(dAtA, i, uint64(m.Method))
	}
	if m.CreationTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEncryptionpb(dAtA, i, uint64(m.CreationTime))
	}
	if m.WasExposed {
		dAtA[i] = 0x28
		i++
		if m.WasExposed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *KeyDictionary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyDictionary) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, msg := range m.Keys {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEncryptionpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.FileDict != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEncryptionpb(dAtA, i, uint64(m.FileDict.Size()))
		n1, err := m.FileDict.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.CurrentDataKey != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEncryptionpb(dAtA, i, uint64(m.CurrentDataKey))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintEncryptionpb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FileInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovEncryptionpb(uint64(l))
	}
	if m.KeyId != 0 {
		n += 1 + sovEncryptionpb(uint64(m.KeyId))
	}
	l = len(m.Iv)
	if l > 0 {
		n += 1 + l + sovEncryptionpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FileDictionary) Size() (n int) {
	var l int
	_ = l
	if len(m.Files) > 0 {
		for _, e := range m.Files {
			l = e.Size()
			n += 1 + l + sovEncryptionpb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DataKey) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovEncryptionpb(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovEncryptionpb(uint64(m.Id))
	}
	if m.Method != 0 {
		n += 1 + sovEncryptionpb(uint64(m.Method))
	}
	if m.CreationTime != 0 {
		n += 1 + sovEncryptionpb(uint64(m.CreationTime))
	}
	if m.WasExposed {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KeyDictionary) Size() (n int) {
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, e := range m.Keys {
			l = e.Size()
			n += 1 + l + sovEncryptionpb(uint64(l))
		}
	}
	if m.FileDict != nil {
		l = m.FileDict.Size()
		n += 1 + l + sovEncryptionpb(uint64(l))
	}
	if m.CurrentDataKey != 0 {
		n += 1 + sovEncryptionpb(uint64(m.CurrentDataKey))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEncryptionpb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEncryptionpb(x uint64) (n int) {
	return sovEncryptionpb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FileInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEncryptionpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncryptionpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEncryptionpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncryptionpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iv", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncryptionpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEncryptionpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Iv = append(m.Iv[:0], dAtA[iNdEx:postIndex]...)
			if m.Iv == nil {
				m.Iv = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEncryptionpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEncryptionpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileDictionary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEncryptionpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileDictionary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileDictionary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncryptionpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEncryptionpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Files = append(m.Files, &FileInfo{})
			if err := m.Files[len(m.Files)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEncryptionpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEncryptionpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEncryptionpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncryptionpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEncryptionpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncryptionpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			m.Method = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncryptionpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Method |= (EncryptionMethod(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTime", wireType)
			}
			m.CreationTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncryptionpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreationTime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WasExposed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncryptionpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WasExposed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEncryptionpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEncryptionpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyDictionary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEncryptionpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyDictionary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyDictionary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncryptionpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEncryptionpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, &DataKey{})
			if err := m.Keys[len(m.Keys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileDict", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncryptionpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEncryptionpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FileDict == nil {
				m.FileDict = &FileInfo{}
			}
			if err := m.FileDict.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentDataKey", wireType)
			}
			m.CurrentDataKey = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncryptionpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentDataKey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEncryptionpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEncryptionpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEncryptionpb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEncryptionpb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEncryptionpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEncryptionpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEncryptionpb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEncryptionpb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEncryptionpb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEncryptionpb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEncryptionpb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("encryptionpb.proto", fileDescriptor_encryptionpb_f6ae5779a9e094d4) }

var fileDescriptor_encryptionpb_f6ae5779a9e094d4 = []byte{
	// 415 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0xd1, 0x8a, 0xd3, 0x40,
	0x14, 0xdd, 0x49, 0xd2, 0x6e, 0x7b, 0xdb, 0x86, 0x70, 0x61, 0x25, 0x4f, 0x31, 0xd4, 0x97, 0x28,
	0xb2, 0x60, 0x16, 0x17, 0x7d, 0x11, 0x56, 0x37, 0x42, 0xa9, 0x56, 0x19, 0x2b, 0xfa, 0x64, 0x98,
	0x4d, 0x6e, 0xd9, 0xa1, 0xdb, 0x26, 0xa4, 0xe3, 0xae, 0xf3, 0x27, 0xfa, 0x09, 0xfe, 0x89, 0x8f,
	0x7e, 0x82, 0xd4, 0x1f, 0x91, 0xcc, 0x26, 0xd2, 0x0a, 0xbe, 0xdd, 0x73, 0xe6, 0x70, 0xee, 0x39,
	0x97, 0x01, 0xa4, 0x75, 0x56, 0xe9, 0x52, 0xc9, 0x62, 0x5d, 0x5e, 0x1c, 0x97, 0x55, 0xa1, 0x0a,
	0x1c, 0xee, 0x72, 0xe3, 0x04, 0x7a, 0x2f, 0xe5, 0x15, 0x4d, 0xd6, 0x8b, 0x02, 0x11, 0x9c, 0x52,
	0xa8, 0x4b, 0x9f, 0x85, 0x2c, 0xea, 0x73, 0x33, 0xe3, 0x11, 0x74, 0x97, 0xa4, 0x53, 0x99, 0xfb,
	0x56, 0xc8, 0x22, 0x87, 0x77, 0x96, 0xa4, 0x27, 0x39, 0xba, 0x60, 0xc9, 0x6b, 0xdf, 0x0e, 0x59,
	0x34, 0xe4, 0x96, 0xbc, 0x1e, 0x3f, 0x03, 0xb7, 0xb6, 0x39, 0x97, 0x59, 0xed, 0x2b, 0x2a, 0x8d,
	0x0f, 0xa1, 0xb3, 0x90, 0x57, 0xb4, 0xf1, 0x59, 0x68, 0x47, 0x83, 0xf8, 0xce, 0xf1, 0x5e, 0x94,
	0x76, 0x27, 0xbf, 0x15, 0x8d, 0xbf, 0x33, 0x38, 0x3c, 0x17, 0x4a, 0x4c, 0x49, 0xa3, 0x07, 0xf6,
	0x92, 0xb4, 0x49, 0x31, 0xe4, 0xf5, 0x68, 0xb6, 0xb5, 0x01, 0x2c, 0x99, 0xe3, 0x29, 0x74, 0x57,
	0xa4, 0x2e, 0x8b, 0xdc, 0x24, 0x70, 0xe3, 0x60, 0xdf, 0x3c, 0xf9, 0x0b, 0x5e, 0x1b, 0x15, 0x6f,
	0xd4, 0x78, 0x0f, 0x46, 0x59, 0x45, 0xa2, 0x7e, 0x49, 0x95, 0x5c, 0x91, 0xef, 0x18, 0xcb, 0x61,
	0x4b, 0xce, 0xe5, 0x8a, 0xf0, 0x2e, 0x0c, 0x6e, 0xc4, 0x26, 0xa5, 0x2f, 0x65, 0xb1, 0xa1, 0xdc,
	0xef, 0x84, 0x2c, 0xea, 0x71, 0xb8, 0x11, 0x9b, 0xe4, 0x96, 0x19, 0x7f, 0x63, 0x30, 0x9a, 0x92,
	0xde, 0xe9, 0x7a, 0x1f, 0x9c, 0x25, 0xe9, 0xb6, 0xea, 0xd1, 0x7e, 0x9a, 0xa6, 0x16, 0x37, 0x12,
	0x3c, 0x81, 0x7e, 0xdd, 0x38, 0xcd, 0x65, 0xa6, 0x4c, 0xa3, 0xff, 0x9f, 0xa6, 0xb7, 0x68, 0x2e,
	0x8a, 0x11, 0x78, 0xd9, 0xe7, 0xaa, 0xa2, 0xb5, 0x4a, 0x73, 0xa1, 0x44, 0x5a, 0x9f, 0xc7, 0x36,
	0xd1, 0xdd, 0x86, 0x6f, 0x96, 0x3c, 0xf8, 0x04, 0xde, 0xbf, 0xed, 0x71, 0x00, 0x87, 0xef, 0x67,
	0xd3, 0xd9, 0x9b, 0x0f, 0x33, 0xef, 0x00, 0x47, 0xd0, 0x7f, 0xfb, 0xea, 0x6c, 0x32, 0x9b, 0x27,
	0x1f, 0xe7, 0x1e, 0x43, 0x17, 0xe0, 0x2c, 0x79, 0xf7, 0x28, 0x7e, 0x92, 0xbe, 0x98, 0x73, 0xcf,
	0x6a, 0xf1, 0xd3, 0xd8, 0x60, 0xbb, 0xc1, 0xf1, 0xe3, 0x53, 0x83, 0x9d, 0xe7, 0xde, 0x8f, 0x6d,
	0xc0, 0x7e, 0x6e, 0x03, 0xf6, 0x6b, 0x1b, 0xb0, 0xaf, 0xbf, 0x83, 0x83, 0x8b, 0xae, 0xf9, 0x55,
	0x27, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x96, 0x57, 0x94, 0x38, 0x6b, 0x02, 0x00, 0x00,
}
